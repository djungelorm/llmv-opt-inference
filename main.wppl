var opcodes = ['add', 'mul', 'sub', 'udiv', 'sdiv', 'urem', 'srem'];
var numRegisters = 5;

var tests = [
  {'inputs': [0, 0], 'output': 0},
  {'inputs': [0, 1], 'output': 1},
  {'inputs': [0, 2], 'output': 2},
  {'inputs': [0, 3], 'output': 3},
  {'inputs': [1, 0], 'output': 1},
  {'inputs': [1, 1], 'output': 2},
  {'inputs': [1, 2], 'output': 3},
  {'inputs': [1, 3], 'output': 4},
  {'inputs': [2, 0], 'output': 2},
  {'inputs': [2, 1], 'output': 3},
  {'inputs': [2, 2], 'output': 4},
  {'inputs': [2, 3], 'output': 5}
];

var inputProgram = llvm.program(2, [
  llvm.instr('%r3', 'add', ['%r1', '%r2']),
  llvm.instr('%r0', 'add', ['%r1', '%r2'])
]);

// Given a program, returns a modified program.
var modifyProgram = function(program) {
  if (flip(0.5))
    return program;
  var transformation = randomInteger(7);
  if (transformation == 0)
    return modifyProgram(swapInstructions(program));
  else if (transformation == 1)
    return modifyProgram(addInstruction(program));
  else if (transformation == 2)
    return modifyProgram(removeInstruction(program));
  else if (transformation == 3)
    return modifyProgram(changeResult(program));
  else if (transformation == 4)
    return modifyProgram(changeOpcode(program));
  else if (transformation == 5)
    return modifyProgram(changeOperand(program));
  else
    return modifyProgram(swapOperands(program));
};

var randomOpcode = function(notOpcode) {
  return categorical({'vs': opcodes, 'ps': map(function (x) { return x == notOpcode ? 0 : 1; }, opcodes)});
};

var randomOperand = function(notOperand) {
  if (flip (0.5)) {
    return categorical({
      'vs': mapN(function (x) { return '%r'+x; }, numRegisters),
      'ps': mapN(function (x) { return x == notOperand ? 0 : 1; }, numRegisters) //TODO: is this a good idea?
    });
  } else {
    return randomInteger(-16,16); //TODO: increase larger powers of two?
  }
};

var randomResult = function(notOperand) {
  return categorical({
    'vs': mapN(function (x) { return '%r'+x; }, numRegisters),
    'ps': mapN(function (x) { return x == notOperand ? 0 : 1; }, numRegisters) //TODO: is this a good idea?
  });
};

// Swap instructions
var swapInstructions = function(program) {
  var idxA = randomInteger(program.instrs.length);
  var idxB = randomInteger(program.instrs.length);
  condition(idxA != idxB);
  var instrA = llvm.getInstr(program, idxA);
  var instrB = llvm.getInstr(program, idxB);
  return llvm.changeInstr(llvm.changeInstr(program, idxA, instrB), idxB, instrA);
};

// Add an instruction
var addInstruction = function(program) {
  var idx = randomInteger(program.instrs.length+1);
  var newInstr = llvm.instr(randomResult(), randomOpcode(), [randomOperand(), randomOperand()]);
  return llvm.addInstr(program, idx, newInstr);
};

// Remove an instruction
var removeInstruction = function(program) {
  if (program.instrs.length <= 1)
    return program;
  var idx = randomInteger(program.instrs.length);
  return llvm.removeInstr(program, idx);
};

// Replace an opcode with another opcode
var changeOpcode = function(program) {
  var idx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, idx);
  var newInstr = llvm.instr(instr.result, randomOpcode(instr.opcode), instr.operands);
  return llvm.changeInstr(program, idx, newInstr);
};

// Replace a result with another result
var changeResult = function(program) {
  var idx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, idx);
  var newInstr = llvm.instr(randomResult(instr.result), instr.opcode, instr.operands);
  return llvm.changeInstr(program, idx, newInstr);
};

// Replace an operand with another operand
var changeOperand = function(program) {
  var instrIdx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, instrIdx);
  var operandIdx = randomInteger(2);
  var operands = mapIndexed(
    function (idx, operand) { return idx == operandIdx ? randomOperand(operand) : operand;  },
    instr.operands);
  var newInstr = llvm.instr(instr.result, instr.opcode, operands);
  return llvm.changeInstr(program, instrIdx, newInstr);
};

// Flip the operands
var swapOperands = function(program) {
  var idx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, idx);
  var newInstr = llvm.instr(instr.result, instr.opcode, [instr.operands[1], instr.operands[0]]);
  return llvm.changeInstr(program, idx, newInstr);
};

// Given a program, return the log probability that it is the most efficient.
var performanceFactor = function(program) {
  return -10*program.instrs.length;
};

// Returns a measure of correctness of a program using a set of tests
var correctnessFactor = function(testProgram, tests) {
  var correctResults = map(function (test) { return test.output; }, tests);
  var testResults = llvm.runTests(testProgram, tests);
  if (testResults == undefined)
    return -Infinity;
  var diffs = map2(function(a, b) { return (a-b)*(a-b); }, correctResults, testResults);
  return -Math.sqrt(reduce(function (a,b) { return a+b; }, 0, diffs));
};

var query = function() {
  var program = modifyProgram(inputProgram);
  factor(correctnessFactor(program, tests));
  factor(performanceFactor(program));
  return program;
};

//console.log(llvm.compileInstrs(inputProgram));
//console.log('output =', llvm.run(inputProgram, [1,2]));
//var modifiedProgram = modifyProgram(inputProgram);
//console.log(llvm.compileInstrs(modifiedProgram));
//console.log('output =', llvm.run(modifiedProgram, [1,2]));

//var program = llvm.program(2, [
//  llvm.instr('%r0', 'add', ['%r1', '%r2']),
//  llvm.instr('%r0', 'add', ['%r1', '%r2'])
//]);
//console.log(llvm.compileInstrs(program));

var optimizedProgramDist = MCMC(query, {'samples': 1000});
var optimizedProgram = sample(optimizedProgramDist);
console.log(llvm.compileIR(optimizedProgram));
