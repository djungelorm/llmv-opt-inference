var opcodes = [
  'add', 'mul', 'sub', 'udiv', 'sdiv', 'urem', 'srem',
  'shl', 'lshr', 'ashr', 'and', 'or', 'xor'
];
var numRegisters = 5;
var minConstant = -2;
var maxConstant = 2;

var opcodeLatencies = {
  'add': 4,
  'mul': 4,
  'sub': 4,
  'udiv': 8,
  'sdiv': 8,
  'urem': 8,
  'srem': 8,
  'shl': 1,
  'lshr': 1,
  'ashr': 1,
  'and': 1,
  'or': 1,
  'xor': 1
};

//var tests = [
//  [0, 0],
//  [0, 1],
//  [0, 2],
//  [0, 3],
//  [1, 0],
//  [1, 1],
//  [1, 2],
//  [1, 3],
//  [2, 0],
//  [2, 1],
//  [2, 2],
//  [2, 3]
//];
//var inputProgram = llvm.program(2, [
//  llvm.instr('%r0', 'add', ['%r1', '%r2']),
//  llvm.instr('%r0', 'add', ['%r1', '%r2']),
//  llvm.instr('%r0', 'add', ['%r1', '%r2']),
//  llvm.instr('%r0', 'add', ['%r1', '%r2']),
//  llvm.instr('%r0', 'add', ['%r1', '%r2'])
//]);

var tests = mapN(function (x) { return [x]; }, 10);
var inputProgram = llvm.program(1, [
  llvm.instr('%r0', 'mul', ['%r1', 2])
  //llvm.instr('%r0', 'shl', ['%r1', 1])
]);

// Compute correct results by running the input program
var correctResults = llvm.runTests(inputProgram, tests);

// Given a program, returns a modified program.
var modifyProgram = function(program) {
  if (flip(0.75))
    return program;
  var transformation = randomInteger(2);
  if (transformation == 0)
    return modifyProgram(swapInstructions(program));
  else if (transformation == 1)
    return modifyProgram(addInstruction(program));
  else if (transformation == 2)
    return modifyProgram(removeInstruction(program));
  else if (transformation == 3)
    return modifyProgram(changeResult(program));
  if (transformation == 0)
    return modifyProgram(changeOpcode(program));
  else if (transformation == 1)
    return modifyProgram(changeOperand(program));
  else
    return modifyProgram(swapOperands(program));
};

var randomOpcode = function(notOpcode) {
  return categorical({'vs': opcodes, 'ps': map(function (x) { return x == notOpcode ? 0 : 1; }, opcodes)});
};

var randomOperand = function(notOperand) {
  if (flip (0.5)) {
    return categorical({
      'vs': mapN(function (x) { return '%r'+x; }, numRegisters),
      'ps': mapN(function (x) { return x == notOperand ? 0 : 1; }, numRegisters) //TODO: is this a good idea?
    });
  } else {
    return randomInteger(maxConstant - minConstant) + minConstant;
  }
};

var randomResult = function(notOperand) {
  return categorical({
    'vs': mapN(function (x) { return '%r'+x; }, numRegisters),
    'ps': mapN(function (x) { return x == notOperand ? 0 : 1; }, numRegisters) //TODO: is this a good idea?
  });
};

// Swap instructions
var swapInstructions = function(program) {
  var idxA = randomInteger(program.instrs.length);
  var idxB = randomInteger(program.instrs.length);
  condition(idxA != idxB);
  var instrA = llvm.getInstr(program, idxA);
  var instrB = llvm.getInstr(program, idxB);
  return llvm.changeInstr(llvm.changeInstr(program, idxA, instrB), idxB, instrA);
};

// Add an instruction
var addInstruction = function(program) {
  var idx = randomInteger(program.instrs.length+1);
  var newInstr = llvm.instr(randomResult(), randomOpcode(), [randomOperand(), randomOperand()]);
  return llvm.addInstr(program, idx, newInstr);
};

// Remove an instruction
var removeInstruction = function(program) {
  if (program.instrs.length <= 1)
    return program;
  var idx = randomInteger(program.instrs.length);
  return llvm.removeInstr(program, idx);
};

// Replace an opcode with another opcode
var changeOpcode = function(program) {
  var idx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, idx);
  var newInstr = llvm.instr(instr.result, randomOpcode(instr.opcode), instr.operands);
  return llvm.changeInstr(program, idx, newInstr);
};

// Replace a result with another result
var changeResult = function(program) {
  var idx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, idx);
  var newInstr = llvm.instr(randomResult(instr.result), instr.opcode, instr.operands);
  return llvm.changeInstr(program, idx, newInstr);
};

// Replace an operand with another operand
var changeOperand = function(program) {
  var instrIdx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, instrIdx);
  var operandIdx = randomInteger(2);
  var operands = mapIndexed(
    function (idx, operand) { return idx == operandIdx ? randomOperand(operand) : operand;  },
    instr.operands);
  var newInstr = llvm.instr(instr.result, instr.opcode, operands);
  return llvm.changeInstr(program, instrIdx, newInstr);
};

// Flip the operands
var swapOperands = function(program) {
  var idx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, idx);
  var newInstr = llvm.instr(instr.result, instr.opcode, [instr.operands[1], instr.operands[0]]);
  return llvm.changeInstr(program, idx, newInstr);
};

// Given a program, return the log probability that it is the most efficient.
var performanceFactor = function(program) {
  return -10*reduce(function (a,b) { return a+b; }, 0,
                    map(function (x) { return opcodeLatencies[x.opcode]; }, program.instrs));
};

// Returns a measure of correctness of a program using a set of tests
var correctnessFactor = function(testProgram, tests) {
  var testResults = llvm.runTests(testProgram, tests);
  if (testResults == undefined)
    return -Infinity;
  var diffs = map2(
    function(a, b) { return llvm.hammingDistance(a['output-binary'],b['output-binary']); },
    correctResults, testResults);
  return -reduce(function (a,b) { return a+b; }, 0, diffs);
};

var query = function() {
  var program = modifyProgram(inputProgram);
  factor(correctnessFactor(program, tests));
  factor(performanceFactor(program));
  return program;
};

//console.log(llvm.compileInstrs(inputProgram));
//console.log('output =', llvm.run(inputProgram, [1,2]));
//var modifiedProgram = modifyProgram(inputProgram);
//console.log(llvm.compileInstrs(modifiedProgram));
//console.log('output =', llvm.run(modifiedProgram, [1,2]));

//var program = llvm.program(2, [
//  llvm.instr('%r0', 'add', ['%r1', '%r2']),
//  llvm.instr('%r0', 'add', ['%r1', '%r2'])
//]);
//console.log(llvm.compileInstrs(program));

console.log('input program correctness =', correctnessFactor(inputProgram, tests));
console.log('input program performance =', performanceFactor(inputProgram, tests));

var optimizedProgramDist = MCMC(query, {'samples': 10000, 'onlyMAP': true});
var optimizedProgram = sample(optimizedProgramDist);

console.log('optimized program correctness =', correctnessFactor(optimizedProgram, tests));
console.log('optimized program performance =', performanceFactor(optimizedProgram, tests));
console.log(llvm.compileInstrs(optimizedProgram));
