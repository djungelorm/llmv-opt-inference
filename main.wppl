var opcodes = ['add', 'mul', 'sub', 'udiv', 'sdiv', 'urem', 'srem'];
var numRegisters = 20;

// Test cases are the values of %0..%n
var tests = [
  {'inputs': [0, 0], 'output': 0},
  {'inputs': [0, 1], 'output': 1},
  {'inputs': [0, 2], 'output': 2},
  {'inputs': [0, 3], 'output': 3},
  {'inputs': [1, 0], 'output': 1},
  {'inputs': [1, 1], 'output': 2},
  {'inputs': [1, 2], 'output': 3},
  {'inputs': [1, 3], 'output': 4},
  {'inputs': [2, 0], 'output': 2},
  {'inputs': [2, 1], 'output': 3},
  {'inputs': [2, 2], 'output': 4},
  {'inputs': [2, 3], 'output': 5}
];

// return %1+%2+%3
var inputProgram = llvm.program(2, [
  llvm.instr(3, 'add', [1, 2]),
  llvm.instr(0, 'add', [1, 2])
]);

// Given a program, returns a modified program.
var modifyProgram = function(program) {
  if (flip(0.5))
    return program;
  var transformation = randomInteger(6);
  if (transformation == 0)
    return modifyProgram(swapInstructions(program));
  else if (transformation == 1)
    return modifyProgram(addInstruction(program));
  else if (transformation == 2)
    return modifyProgram(removeInstruction(program));
  else if (transformation == 3)
    return modifyProgram(changeOpcode(program));
  else if (transformation == 4)
    return modifyProgram(changeOperand(program));
  else
    return modifyProgram(swapOperands(program));
};

var randomOpcode = function(notOpcode) {
  return categorical({'vs': opcodes, 'ps': map(function (x) { return x == notOpcode ? 0 : 1; }, opcodes)});
};

var randomOperand = function(notOperand) {
  return categorical({
    'vs': mapN(function (x) { x }, numRegisters),
    'ps': mapN(function (x) { return x == notOperand ? 0 : 1; }, numRegisters)
  });
};

// Remove an instruction
var swapInstructions = function(program) {
  var idxA = randomInteger(program.instrs.length);
  var idxB = randomInteger(program.instrs.length);
  var instrA = llvm.getInstr(program, idxA);
  var instrB = llvm.getInstr(program, idxB);
  return llvm.changeInstr(llvm.changeInstr(program, idxA, instrB), idxB, instrA);
};

// Add an instruction
var addInstruction = function(program) {
  var idx = randomInteger(program.instrs.length+1);
  var newInstr = llvm.instr(randomOperand(), randomOpcode(), [randomOperand(), randomOperand()]);
  return llvm.addInstr(program, idx, newInstr);
};

// Remove an instruction
var removeInstruction = function(program) {
  if (program.instrs.length <= 1)
    return program;
  var idx = randomInteger(program.instrs.length);
  return llvm.removeInstr(program, idx);
};

// Replace an opcode with another opcode
var changeOpcode = function(program) {
  var idx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, idx);
  var newInstr = llvm.instr(instr.result, randomOpcode(instr.opcode), instr.operands);
  return llvm.changeInstr(program, idx, newInstr);
};

// Replace an operand with another (type equivalent) operand or a constant
var changeOperand = function(program) {
  var instrIdx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, instrIdx);
  var operandIdx = randomInteger(2);
  var operands = mapIndexed(
    function (idx, operand) { return idx == operandIdx ? randomOperand() : operand;  },
    instr.operands);
  var newInstr = llvm.instr(instr.result, instr.opcode, operands);
  return llvm.changeInstr(program, instrIdx, newInstr);
};

// Flip the operands for an instruction
var swapOperands = function(program) {
  var idx = randomInteger(program.instrs.length);
  var instr = llvm.getInstr(program, idx);
  var newInstr = llvm.instr(instr.result, instr.opcode, [instr.operands[1], instr.operands[0]]);
  return llvm.changeInstr(program, idx, newInstr);
};

// Given a program, return the log probability that it is the most efficient.
var performanceFactor = function(program) {
  return -program.instrs.length;
};

// Returns a measure of correctness of a program using a set of tests
var correctnessFactor = function(testProgram, tests) {
  var correctResults = map(function (test) { return test.output; }, tests);
  var testResults = llvm.runTests(testProgram, tests);
  if (testResults == undefined)
    return -Infinity;
  var diffs = map2(function(a, b) { return (a-b)*(a-b); }, correctResults, testResults);
  return -Math.sqrt(reduce(function (a,b) { return a+b; }, 0, diffs));
};

var query = function() {
  var program = modifyProgram(inputProgram);
  var c = correctnessFactor(program, tests);
  factor(c);
  var p = performanceFactor(program);
  factor(p);
  console.log(c, p);
  return program;
};

var optimizedProgramDist = MCMC(query, {'samples': 1000});
var optimizedProgram = sample(optimizedProgramDist);

console.log(llvm.compileIR(optimizedProgram));
llvm.run(optimizedProgram, [1, 2]);

//var modifiedProgram = modifyProgram(exampleProgram);
//console.log(correctness(exampleProgram, modifiedProgram, exampleTests));
//console.log(performance(exampleProgram));
