var writeFileSync = require('fs').writeFileSync;
var execSync = require('child_process').execSync;
var spawnSync = require('child_process').spawnSync;
var exeId = 0;

var runTestCases = function(program, test_cases) {
  var results = [];
  var exe = compileExecutable(program, 'tmp/program');
  for (var i = 0; i < test_cases.length; i++) {
    var inputs = test_cases[i].inputs;
    var stdout = execSync('./'+exe+' '+inputs.join(' '));
    results.push(parseInt(stdout.toString()));
  }
  return results;
}

var compileExecutable = function(program, path_prefix) {
  var path = path_prefix + exeId;
  exeId += 1;
  var ir = compileIR(program);
  writeFileSync(path+".ll", ir);
  execSync('llc -filetype obj -o '+path+'.o '+path+'.ll');
  execSync('gcc '+path+'.o -o '+path);
  return path;
};

var compileIR = function(program) {
  var inputs = [];
  var inputs_extract = [];
  for (var idx = 1; idx < program.inputs+1; idx++) {
    inputs.push("i32 %r"+idx);
    inputs_extract.push(
      "  %r"+idx+"_ptr = getelementptr inbounds i8*, i8** %argc, i64 "+idx+"\n" +
      "  %r"+idx+"_str = load i8*, i8** %r"+idx+"_ptr\n" +
      "  %r"+idx+" = call i32 @atoi(i8* %r"+idx+"_str)");
  }
  inputs = inputs.join(', ');
  return [
    "; ModuleID = 'program'", "",
    "declare i32 @atoi(i8*)", "",
    "declare i32 @printf(i8*, ...)", "",
    "@.str = private unnamed_addr constant [2 x i8] c\"%d\", align 1", "",
    "define i32 @main(i32 %argv, i8** %argc) {",
    "body:"]
    .concat(inputs_extract)
    .concat(
      "  %r0 = call i32 @program("+inputs+")",
      "  %ignore = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i32 %r0)",
      "  ret i32 0",
      "}","")
    .concat(compileProgram(program))
    .join("\n");
};

var compileProgram = function(program) {
  var inputs = [];
  for (var idx = 1; idx < program.inputs+1; idx++)
    inputs.push("i32 %r"+idx);
  var instrs = compileInstrs(program.instrs);
  return ["define i32 @program(" + inputs.join(", ") + ") {", "body:"]
        .concat(instrs)
        .concat("  ret i32 %r0", "}", "");
};

var compileInstrs = function(instrs) {
  var code = '';
  for (var idx = 0; idx < instrs.length; idx++)
    code += compileInstr(instrs[idx]) + '\n';
  return code;
};

var compileInstr = function(instr) {
  var operands = [];
  for (var idx = 0; idx < instr.operands.length; idx++)
    operands.push('%r'+instr.operands[idx]);
  return '  %r'+instr.result+' = '+instr.opcode+' i32 '+operands.join(', ');
};

var createProgram = function(inputs, instrs) {
  return {'inputs': inputs, 'instrs': instrs};
};

var createInstr = function(result, opcode, left, right) {
  return {'result': result, 'opcode': opcode, 'operands': [left, right]};
};

module.exports = {
  program: createProgram,
  instr: createInstr,
  runTestCases: runTestCases,
  compileExecutable: compileExecutable,
  compileIR: compileIR
};
