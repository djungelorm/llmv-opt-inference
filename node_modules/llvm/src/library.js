var writeFileSync = require('fs').writeFileSync;
var execSync = require('child_process').execSync;
var spawnSync = require('child_process').spawnSync;
var exeId = 0;

var runTests = function(program, tests) {
  var results = [];
  var exe = compileExecutable(program, 'tmp/program');
  for (var i = 0; i < tests.length; i++) {
    var inputs = tests[i].inputs;
    var stdout = execSync('./'+exe+' '+inputs.join(' '));
    results.push(parseInt(stdout.toString()));
  }
  return results;
}

var compileExecutable = function(program, pathPrefix) {
  var path = pathPrefix + exeId;
  exeId += 1;
  var ir = compileIR(program);
  writeFileSync(path+".ll", ir);
  execSync('llc -filetype obj -o '+path+'.o '+path+'.ll');
  execSync('gcc '+path+'.o -o '+path);
  return path;
};

var compileIR = function(program) {
  var inputs = [];
  var inputsExtract = [];
  for (var idx = 1; idx < program.inputs+1; idx++) {
    inputs.push("i32 %r"+idx);
    inputsExtract.push(
      '  %r'+idx+'.ptr = getelementptr inbounds i8*, i8** %argc, i64 '+idx+'\n' +
      '  %r'+idx+'.str = load i8*, i8** %r'+idx+'.ptr\n' +
      '  %r'+idx+' = call i32 @atoi(i8* %r'+idx+'.str)');
  }
  inputs = inputs.join(', ');
  return [
    '; ModuleID = \'program\'', '',
    'declare i32 @atoi(i8*)', '',
    'declare i32 @printf(i8*, ...)', '',
    '@.str = private unnamed_addr constant [2 x i8] c"%d", align 1', '',
    'define i32 @main(i32 %argv, i8** %argc) {',
    'body:']
    .concat(inputsExtract)
    .concat(
      '  %r0 = call i32 @program('+inputs+')',
      '  %ignore = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i32 %r0)',
      '  ret i32 0',
      '}','')
    .concat(compileProgram(program))
    .join('\n');
};

var compileProgram = function(program) {
  var inputs = [];
  for (var idx = 1; idx < program.inputs+1; idx++)
    inputs.push('i32 %r'+idx);
  var instrs = compileInstrs(program.instrs);
  return ['define i32 @program(' + inputs.join(', ') + ') {', 'body:']
        .concat(instrs)
        .concat('  ret i32 %r0', '}', '');
};

var compileInstrs = function(instrs) {
  var code = '';
  for (var idx = 0; idx < instrs.length; idx++)
    code += compileInstr(instrs[idx]) + '\n';
  return code;
};

var compileInstr = function(instr) {
  var operands = [];
  for (var idx = 0; idx < instr.operands.length; idx++)
    operands.push('%r'+instr.operands[idx]);
  return '  %r'+instr.result+' = '+instr.opcode+' i32 '+operands.join(', ');
};

var createProgram = function(inputs, instrs) {
  return {'inputs': inputs, 'instrs': instrs};
};

var createInstr = function(result, opcode, operands) {
  return {'result': result, 'opcode': opcode, 'operands': operands};
};

var getInstr = function(program, idx) {
  return program.instrs[idx];
};

var changeInstr = function(program, idx, newInstr) {
  if (idx == 0) {
    var last = program.instrs.slice(idx+1);
    var newInstrs = [newInstr].concat(last);
  } else if (idx == program.instrs.length-1) {
    var first = program.instrs.slice(0,idx);
    var newInstrs = first.concat(newInstr);
  } else {
    var first = program.instrs.slice(0,idx);
    var last = program.instrs.slice(idx+1);
    var newInstrs = first.concat(newInstr).concat(last);
  }
  return createProgram(program.inputs, newInstrs);
};

var addInstr = function(program, idx, newInstr) {
  if (idx == 0) {
    var newInstrs = [newInstr].concat(program.instrs);
  } else if (idx == program.instrs.length) {
    var newInstrs = program.instrs.concat(newInstr);
  } else {
    var first = program.instrs.slice(0,idx);
    var last = program.instrs.slice(idx);
    var newInstrs = first.concat(newInstr).concat(last);
  }
  return createProgram(program.inputs, newInstrs);
};

var removeInstr = function(program, idx) {
  if (idx == 0) {
    var newInstrs = program.instrs.slice(idx+1);
  } else if (idx == program.instrs.length-1) {
    var newInstrs = program.instrs.slice(0,idx);
  } else {
    var first = program.instrs.slice(0,idx);
    var last = program.instrs.slice(idx+1);
    var newInstrs = first.concat(last);
  }
  return createProgram(program.inputs, newInstrs);
};

module.exports = {
  program: createProgram,
  instr: createInstr,
  getInstr: getInstr,
  changeInstr: changeInstr,
  addInstr: addInstr,
  removeInstr: removeInstr,
  runTests: runTests,
  compileExecutable: compileExecutable,
  compileIR: compileIR
};
